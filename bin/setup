#!/bin/bash

llvmRequiredVersion="14.0.6" ;

prefixString="### NOELLE Gym: Setup ###" ;
echo "${prefixString} All benchmarks from all benchmark suites will be compiled" ;
echo "${prefixString} Results will be stored in `pwd`/results/current_machine" ;
echo "${prefixString} The output of each step will be stored in `pwd`/output.txt" ;
echo "${prefixString}     (you can run \"tail -f output.txt\" to see the current state at finer granularity)" ;
echo "" ;

origDir="`pwd`" ;

# Test the environment
if ! command -v go &> /dev/null; then
  echo "${prefixString} ERROR: \"go\" cannot be found. Please enable a go installation. If you are in Zythos, run the following command:" ;
  echo "${prefixString}  \"source /project/go/go_1.13.7/enable\"" ;
  exit 1;
fi
if ! command -v clang &> /dev/null ; then
  echo "${prefixString} ERROR: \"clang\" cannot be found. Please enable a clang/LLVM installation. If you are in Zythos, run the following command:" ;
  echo "${prefixString}  \"source /project/extra/llvm/${llvmRequiredVersion}/enable\"" ;
  exit 1;
fi
tmpFile="`mktemp`" ;
clang --version &> $tmpFile ;
grep "clang version" $tmpFile | grep ${llvmRequiredVersion} &> /dev/null ;
if test $? -ne 0 ; then
  echo "${prefixString} ERROR: \"clang/LLVM\" installed is version `clang --version | grep 'clang version'`"
  echo "${prefixString}   You need LLVM ${llvmRequiredVersion} to use NOELLE"
  echo "${prefixString}   Please read README.md of NOELLE: https://github.com/arcana-lab/noelle/blob/master/README.md";
  rm $tmpFile ;
  exit 1;
fi
if ! command -v gclang &> /dev/null ; then
  echo "${prefixString} ERROR: \"gclang\" cannot be found. Please enable a gclang installation for LLVM ${llvmRequiredVersion}. If you are in Zythos, run the following command:" ;
  echo "${prefixString}  \"source /project/gllvm/enable\"" ;
  rm $tmpFile ;
  exit 1;
fi
gclang --version &> $tmpFile ;
grep "clang version" $tmpFile | grep ${llvmRequiredVersion} &> /dev/null ;
if test $? -ne 0 ; then
  echo "${prefixString} ERROR: \"gclang\" installed is version `gclang --version | grep 'clang version'`"
  echo "${prefixString}   You need glang for LLVM ${llvmRequiredVersion} to use NOELLE"
  rm $tmpFile ;
  exit 1;
fi
rm $tmpFile ;

# Compile external software
echo "${prefixString}   Start compiling external software" ;
echo "${prefixString}     Compiling NOELLE" ;
./scripts/compile_NOELLE.sh >> ${origDir}/output.txt 2>&1 ;
if test $? -ne 0 ; then
  exit 1;
fi
echo "${prefixString}       NOELLE has been compiled succesfully" ;
echo "${prefixString}     Compiling Gino" ;
./scripts/compile_GINO.sh >> ${origDir}/output.txt 2>&1 ;
if test $? -ne 0 ; then
  exit 1;
fi
echo "${prefixString}       GINO has been compiled succesfully" ;

# Download the git repository
echo "${prefixString}   Setup the benchmark suites" ;
if ! test -d all_benchmark_suites ; then
  git clone https://github.com/scampanoni/wholeprogram_benchmarks.git all_benchmark_suites >> ${origDir}/output.txt 2>&1 ;
  if test $? -ne 0 ; then
    exit 1;
  fi
fi
cd all_benchmark_suites ;
if ! test -e install ; then
  echo "${prefixString}     Compile" ;
  make >> ${origDir}/output.txt 2>&1 ;
  if test $? -ne 0 ; then
    exit 1;
  fi
fi

echo "${prefixString} Exit" ;
exit 0;
