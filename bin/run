#!/bin/bash -e

function run_with_technique {
  local technique=$1 ;

  local haveAllRun=$(are_all_benchmarks_run_for_all_suites $technique);
  if test "$haveAllRun" == "0" ; then
    aBenchmarkRun="1" ;
    echo "${prefixString}       Start running $technique binaries";
    ./scripts/generate_NOELLE_binaries.sh $technique >> output.txt 2>&1 ;
    echo "${prefixString}       Binaries are generated" ;
    ./scripts/run_NOELLE_binaries.sh $technique >> output.txt 2>&1 ;
  fi
  echo "${prefixString}       Binaries succesfully compiled and optimized with $technique have run" ;

  return ;
}

prefixString="### NOELLE Gym: Run ###" ;
echo "${prefixString} All benchmarks from all benchmark suites will run" ;
echo "${prefixString} Results will be stored in `pwd`/results/current_machine" ;
echo "${prefixString} The output of each step will be stored in `pwd`/output.txt" ;
echo "${prefixString}     (you can run \"tail -f output.txt\" to see the current state at finer granularity)" ;
echo "" ;

# Configure NOELLE
source NOELLE/enable ;
export NOELLE_CORES=8 ;

# Include bash functions
source scripts/misc.sh

# Generate and run the baseline binaries
echo "${prefixString}     Run the baseline" ;
./bin/runBaseline

# Generate times for parallelization enablers
echo "${prefixString}     Run with only enablers" ;
./scripts/copy_NOELLE_enablers.sh >> output.txt 2>&1 ;
aBenchmarkRun="0" ;
run_with_technique "NONE" ;

# Generate times of DOALL parallelized binaries for all benchmarks
echo "${prefixString}     Run with DOALL" ;
run_with_technique "DOALL" ;

# Generate times of HELIX parallelized binaries for all benchmarks
echo "${prefixString}     Run with HELIX" ;
run_with_technique "HELIX" ;

# Generate times of DSWP parallelized binaries for all benchmarks
echo "${prefixString}     Run with DSWP" ;
run_with_technique "DSWP" ;

# Generate times of DSWP parallelized binaries for all benchmarks
echo "${prefixString}     Run with AUTOTUNER" ;
run_with_technique "AUTOTUNER" ;

# Compute the parallelization statistics
if test $aBenchmarkRun != "0" ; then
  echo "${prefixString}   Compute the impact of the parallelization techniques" ;
  ./bin/plot >> output.txt 2>&1 ;
fi

echo "${prefixString} Exit" ;
